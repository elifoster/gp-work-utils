#!/usr/bin/env ruby
# encoding: utf-8

# Modules TODO:
# - story management
# - Setting forward on mw interwiki prefix
# - Checking gphelp interwiki prefix is correct (forward and transclude set, uses HTTPS)
# - Adding to wikis.txt
# - protecting legal notices

DOCS = <<EOS
A script that handles some base actions for spinning up a wiki.

Usage: `spinup <wiki name> [options]`
  Options:
    -o to handle specific changes and checks for official wikis
    --skip to skip certain modules, see below for a list of modules. Format: --skip=module1,module2,module3 Module
      names cannot have spaces in them. Separate them by comma.
    --only the inverse of --skip. When provided, --skip is not used. Specify the modules to execute explicitly. 
      Format the same way as --skip.
EOS

if ARGV.size.zero? || ARGV[0] == 'help'
  print DOCS
  exit
end

require 'dotenv'
require 'mediawiki/butt'
require_relative '../lib/wiki_manager'
require_relative '../lib/butt_extensions'

Dotenv.load
using ButtExtensions

# @param str [String] The string to strip HTML from.
# @return [String] Removes <p>...\n</p> from the provided string. This is, for some reason that I am unsure of,
# provided by the return value of the parse API for {{Gamename}} and {{SITENAME}}.
def strip_html(str)
  str
  .sub('<p>', '')
  .sub('</p>', '')
  .sub("\n", '')
end

@mw = MediaWiki::Butt.new("https://#{ARGV[0]}.gamepedia.com/api.php")
@mw.login(ENV['WIKI_USERNAME'], ENV['WIKI_PASSWORD'])

@is_official = ARGV.include?('-o')
GAMENAME = strip_html(@mw.parse_text('{{Gamename}}'))
SITENAME = strip_html(@mw.parse_text('{{SITENAME}}'))

class ActionModule
  attr_reader :name
  def initialize(name, mw)
    @name = name
    @mw = mw
  end

  def official_only?
    false
  end
end

class BaseCategoriesModule < ActionModule
  def execute
    @mw.create_page("Category:#{GAMENAME}", '[[Category:Contents]]')
    @mw.create_page("Category:#{SITENAME}", '[[Category:Contents]]')
    @mw.create_page('Category:Contents', 'This is the root category.')
  end
end

class HideMaintenanceCategories < ActionModule
  CATEGORIES = [
    'Candidates for deletion',
    'Candidates for speedy deletion',
    'Citation needed',
    'Cleanup',
    'Images needing improvement',
    'Pages to be merged',
    'Pages to be moved',
    'Pages with broken file links',
    'Stubs',
    'Unattributed files'
  ]

  def execute
    CATEGORIES.each do |category|
      title = "Category:#{category}"
      text = @mw.get_text(title)
      text << "\n__HIDDENCAT__"
      @mw.edit(title, text, summary: 'Hiding category.')
    end
  end
end

class AddSelfToAdminsList < ActionModule
  def execute
    admins_list = @mw.get_text('Template:Admins')
    @mw.edit('Template:Admins',
             admins_list.split("\n")
                        .delete_if { |line| line.include?('delete this line during spin up') }
                        .join("\n")
                        .sub('<!--{{Wiki admin|Game Widow}}-->', '{{Wiki admin|TheSatanicSanta}}'),
             summary: 'Replacing curse admin with TheSatanicSanta.')
  end
end

class Pagetitles < ActionModule
  def official_only?
    true
  end

  SUMMARY = 'Setting to official.'
  SITENAME = 'Official {{SITENAME}}'

  def execute
    @mw.create_page('MediaWiki:Pagetitle', "$1 - #{SITENAME}", summary: SUMMARY)
    @mw.create_page('MediaWiki:Pagetitle-view-mainpage', SITENAME, summary: SUMMARY)
  end
end

class MoveHowToPlay < ActionModule
  def execute
    @mw.move('How to play guide for Default Loadout', "How to play guide for #{GAMENAME}", suppress_redirect: true )
  end
end

ALL_MODULES = [
  BaseCategoriesModule.new('basecategories', @mw),
  HideMaintenanceCategories.new('maintenancecats', @mw),
  AddSelfToAdminsList.new('adminslist', @mw),
  Pagetitles.new('pagetitles', @mw),
  MoveHowToPlay.new('howtoplay', @mw)
]

# @param name [String] The name of the parameter passed to the CLI
# @return [Array<String>] The list of values provided to a --{name}= CLI argument. For example, if the user passed
#   "--test=test1,test2,test3", this function when passed with 'test' would return an array of 'test1', 'test2', and
#   'test3'. If no argument was provided for this parameter to the CLI, it returns an empty array, not nil.
def get_csv_param(name)
  param = ARGV.find { |opt| opt.start_with?("--#{name}=") }
  param ? param.sub("--#{name}=", '').split(',') : []
end

skips = get_csv_param('skip')
onlys = get_csv_param('only')
if onlys.empty?
  @modules = ALL_MODULES.delete_if { |mod| skips.include?(mod.name) || (!@is_official && mod.official_only?) }
else
  @modules = ALL_MODULES.delete_if { |mod| !onlys.include?(mod.name) || (!@is_official && mod.official_only?) }
end

@modules.each do |mod|
  puts "Executing #{mod.name}"
  mod.execute
  puts "Finished #{mod.name}"
end
